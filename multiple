// File: app/api/auth-proxy/route.ts
import { cookies } from "next/headers";
import { type NextRequest, NextResponse } from "next/server";

// Server-only environment variables
const API_BASE_URL =
  process.env.NEXT_PUBLIC_API_URL ||
  "https://nailfeed-backend-production.up.railway.app";
const SERVER_API_TOKEN = process.env.API_TOKEN || "";

// Helper: normalize URL join
function joinUrl(base: string, path: string) {
  const b = base.endsWith("/") ? base.slice(0, -1) : base;
  const p = path.startsWith("/") ? path : `/${path}`;
  return `${b}${p}`;
}

/**
 * POST /api/auth-proxy
 * Body: { endpoint: string, method?: string, data?: any, headers?: Record<string, string>, authorizationOverride?: string }
 * Behavior:
 * - Builds a request to the backend at API_BASE_URL + endpoint
 * - Authorization priority: cookie JWT > authorizationOverride (from client) > SERVER_API_TOKEN
 * - Never exposes secrets to the client; runs server-side
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json().catch(() => ({}));
    const {
      endpoint,
      method = "GET",
      data,
      headers: incomingHeaders = {},
      authorizationOverride,
    } = body || {};

    if (!endpoint || typeof endpoint !== "string") {
      return NextResponse.json(
        {
          error: {
            code: "bad_request",
            message: "Missing or invalid 'endpoint'.",
          },
        },
        { status: 400 }
      );
    }

    const url = joinUrl(API_BASE_URL, endpoint);

    // Start with safe defaults. Whitelist a small set of headers from the client.
    const headers: Record<string, string> = {
      "Content-Type": "application/json",
    };

    const allowedHeaderNames = new Set(["content-type", "accept"]);
    for (const [k, v] of Object.entries(incomingHeaders || {})) {
      if (typeof v === "string" && allowedHeaderNames.has(k.toLowerCase())) {
        headers[k] = v;
      }
    }

    // Determine Authorization header (await cookies() to avoid sync dynamic API error)
    const cookieStore = await cookies();
    const jwt =
      cookieStore.get("jwt")?.value || cookieStore.get("authToken")?.value;

    if (jwt) {
      headers["Authorization"] = `Bearer ${jwt}`;
    } else if (
      authorizationOverride &&
      typeof authorizationOverride === "string"
    ) {
      headers["Authorization"] = authorizationOverride;
    } else if (SERVER_API_TOKEN) {
      headers["Authorization"] = `Bearer ${SERVER_API_TOKEN}`;
    }

    const fetchOptions: RequestInit = {
      method,
      headers,
      cache: "no-store",
    };

    if (method.toUpperCase() !== "GET" && data !== undefined) {
      fetchOptions.body =
        typeof data === "string" ? data : JSON.stringify(data);
    }

    const resp = await fetch(url, fetchOptions);

    const contentType = resp.headers.get("content-type") || "";
    const status = resp.status;

    if (contentType.includes("application/json")) {
      const json = await resp.json();
      return NextResponse.json(json, { status });
    }

    const text = await resp.text();
    return new NextResponse(text, {
      status,
      headers: { "content-type": contentType || "text/plain" },
    });
  } catch (error) {
    console.error("API proxy error:", error);
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
}

// File: app/connect/google/redirect/route.ts
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const access_token = searchParams.get("access_token");
    const id_token = searchParams.get("id_token");
    const error = searchParams.get("error");

    console.log("Google redirect callback received:", {
      access_token: !!access_token,
      id_token: !!id_token,
      error,
    });

    if (error) {
      console.error("OAuth error:", error);
      return NextResponse.redirect(
        new URL(`/auth?error=${error}`, request.url)
      );
    }

    if (!access_token && !id_token) {
      console.error("No token received from Google");
      return NextResponse.redirect(
        new URL("/auth?error=no_token", request.url)
      );
    }

    // Use local Strapi URL in development, production URL otherwise
    const strapiUrl =
      process.env.NODE_ENV === "development"
        ? "http://127.0.0.1:1337"
        : process.env.API_URL ||
          process.env.NEXT_PUBLIC_API_URL ||
          "https://nailfeed-backend-production.up.railway.app";

    console.log("Using Strapi URL:", strapiUrl);

    try {
      // Build the callback URL for Strapi
      let callbackUrl = `${strapiUrl}/api/auth/google/callback`;
      if (access_token) {
        callbackUrl += `?access_token=${encodeURIComponent(access_token)}`;
      } else if (id_token) {
        callbackUrl += `?id_token=${encodeURIComponent(id_token)}`;
      }

      console.log(
        "Calling Strapi callback:",
        callbackUrl.replace(/(token=)[^&]+/, "$1***")
      );

      const response = await fetch(callbackUrl, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("Strapi callback failed:", response.status, errorText);

        if (response.status === 400) {
          return NextResponse.redirect(
            new URL("/auth?error=provider_disabled", request.url)
          );
        } else if (response.status === 401) {
          return NextResponse.redirect(
            new URL("/auth?error=invalid_token", request.url)
          );
        } else {
          return NextResponse.redirect(
            new URL("/auth?error=strapi_auth_failed", request.url)
          );
        }
      }

      const data = await response.json();
      console.log("Strapi authentication successful:", {
        hasJwt: !!data.jwt,
        hasUser: !!data.user,
      });

      if (!data.jwt) {
        console.error("No JWT received from Strapi");
        return NextResponse.redirect(
          new URL("/auth?error=no_jwt", request.url)
        );
      }

      // Set cookies for authentication (await cookies() to avoid sync dynamic API error)
      const cookieOptions = {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "lax" as const,
        maxAge: 60 * 60 * 24 * 7, // 7 days
        path: "/",
      };

      const cookieStore = await cookies();

      // Set the main auth token (httpOnly for security)
      cookieStore.set("auth_token", data.jwt, cookieOptions);

      // Set client-accessible tokens for compatibility
      cookieStore.set("jwt", data.jwt, {
        ...cookieOptions,
        httpOnly: false, // Allow client access
      });

      cookieStore.set("authToken", data.jwt, {
        ...cookieOptions,
        httpOnly: false, // Allow client access
      });

      // Store user ID if available
      if (data.user?.id) {
        cookieStore.set("userId", String(data.user.id), {
          ...cookieOptions,
          httpOnly: false, // Allow client access
        });
      }

      console.log("Cookies set, redirecting to home");
      return NextResponse.redirect(new URL("/", request.url));
    } catch (fetchError) {
      console.error("Error calling Strapi:", fetchError);
      return NextResponse.redirect(
        new URL("/auth?error=network_error", request.url)
      );
    }
  } catch (error) {
    console.error("Google redirect handler error:", error);
    return NextResponse.redirect(
      new URL("/auth?error=handler_error", request.url)
    );
  }
}
